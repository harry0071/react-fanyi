{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["md5","window","axios","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","appid","key","salt","srcLang","to","languages","lang","name","result","fanyi","bind","assertThisInitialized","setSrcLang","setTo","_this2","jsonp","params","q","from","sign","then","res","trans_result","dst","setState","ev","target","value","_this$state","react_default","a","createElement","className","id","onChange","map","autoFocus","placeholder","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAGMA,SAAMC,OAAOD,KACbE,EAAQD,OAAOC,MAsGNC,cAnGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,oBACPC,IAAK,uBACLC,KAAM,aACNC,QAAQ,GACRC,GAAG,KACHC,UAAU,CAAC,CACTC,KAAK,KACLC,KAAK,gBACL,CACAD,KAAK,KACLC,KAAK,gBACL,CACAD,KAAK,KACLC,KAAK,gBACL,CACAD,KAAK,MACLC,KAAK,gBACL,CACAD,KAAK,KACLC,KAAK,gBACL,CACAD,KAAK,MACLC,KAAK,gBACL,CACAD,KAAK,KACLC,KAAK,gBACL,CACAD,KAAK,KACLC,KAAK,iBAEPC,OAAO,yBAGThB,EAAKiB,MAAQjB,EAAKiB,MAAMC,KAAXjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,KACbA,EAAKoB,WAAapB,EAAKoB,WAAWF,KAAhBjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,KAClBA,EAAKqB,MAAQrB,EAAKqB,MAAMH,KAAXjB,OAAAkB,EAAA,EAAAlB,QAAAkB,EAAA,EAAAlB,CAAAD,KAtCIA,uEAyCZ,IAAAsB,EAAAnB,KACLN,EAAM0B,MAAM,sDAAuD,CACjEC,OAAQ,CACNC,EAAGtB,KAAKI,MAAMI,QACdC,GAAIT,KAAKI,MAAMK,GACfJ,MAAOL,KAAKI,MAAMC,MAClBC,IAAKN,KAAKI,MAAME,IAChBiB,KAAM,OACNhB,KAAMP,KAAKI,MAAMG,KACjBiB,KAAMhC,EAAIQ,KAAKI,MAAMC,MAAQL,KAAKI,MAAMI,QAAUR,KAAKI,MAAMG,KAAOP,KAAKI,MAAME,QAGlFmB,KAAK,SAAAC,GACJ,IAAMb,EAASa,EAAIC,aAAa,GAAGC,IACnCT,EAAKU,SAAS,CAAEhB,gDAKTiB,GACT9B,KAAK6B,SAAS,CACZrB,QAASsB,EAAGC,OAAOC,sCAIjBF,GACJ9B,KAAK6B,SAAS,CACZpB,GAAIqB,EAAGC,OAAOC,yCAIT,IAAAC,EACiCjC,KAAKI,MAArCM,EADDuB,EACCvB,UAAUF,EADXyB,EACWzB,QAAQC,EADnBwB,EACmBxB,GAAGI,EADtBoB,EACsBpB,OAC7B,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,WAAR,wCAUEJ,EAAAC,EAAAC,cAAA,UAAQE,GAAG,KAAKN,MAAOvB,EAAI8B,SAAUvC,KAAKkB,OACvCR,EAAU8B,IAAI,SAAA7B,GAAI,OAAIuB,EAAAC,EAAAC,cAAA,UAAQ9B,IAAKK,EAAKA,KAAMqB,MAAOrB,EAAKA,MAAOA,EAAKC,SAX3E,UAcAsB,EAAAC,EAAAC,cAAA,YAAUJ,MAAOxB,EAAS+B,SAAUvC,KAAKiB,WAAYwB,WAAS,EAACC,YAAY,mCAC3ER,EAAAC,EAAAC,cAAA,UAAQE,GAAG,MAAMK,QAAS3C,KAAKc,OAA/B,gBACAoB,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUzB,GAClBqB,EAAAC,EAAAC,cAAA,iFA9FUQ,aCIEC,QACW,cAA7BpD,OAAOqD,SAASC,UAEe,UAA7BtD,OAAOqD,SAASC,UAEhBtD,OAAOqD,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.b6d45231.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst md5 = window.md5;\nconst axios = window.axios;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      appid: '20160614000023332',\n      key: '9KrY22h99MzDRWiJ0Jen',\n      salt: '1435660288',\n      srcLang:'',\n      to:'zh',\n      languages:[{\n        lang:'zh',\n        name:'中文'\n      },{\n        lang:'en',\n        name:'英语'\n      },{\n        lang:'jp',\n        name:'日语'\n      },{\n        lang:'kor',\n        name:'韩语'\n      },{\n        lang:'th',\n        name:'泰语'\n      },{\n        lang:'fra',\n        name:'法语'\n      },{\n        lang:'ru',\n        name:'俄语'\n      },{\n        lang:'de',\n        name:'德语'\n      }],\n      result:'Please enter the text'\n    };\n\n    this.fanyi = this.fanyi.bind(this);\n    this.setSrcLang = this.setSrcLang.bind(this);\n    this.setTo = this.setTo.bind(this);\n  };\n\n  fanyi(){\n    axios.jsonp('https://fanyi-api.baidu.com/api/trans/vip/translate', {\n      params: {\n        q: this.state.srcLang,\n        to: this.state.to,\n        appid: this.state.appid,\n        key: this.state.key,\n        from: 'auto',\n        salt: this.state.salt,\n        sign: md5(this.state.appid + this.state.srcLang + this.state.salt + this.state.key)\n      }\n    })\n    .then(res => {\n      const result = res.trans_result[0].dst;\n      this.setState({ result });\n    })\n\n  };\n\n  setSrcLang(ev){\n    this.setState({\n      srcLang: ev.target.value\n    })\n  };\n\n  setTo(ev){\n    this.setState({\n      to: ev.target.value\n    })\n  };\n\n  render() {\n    const { languages,srcLang,to,result } = this.state;\n    return (\n      <div className=\"container\">\n        <div id=\"from-to\">\n          {/*\n          <select id=\"to\">\n            <option value=\"auto\">自动检测</option>\n            <option value=\"zh\">中文</option>\n            <option value=\"en\">英语</option>\n            <option value=\"jp\">日语</option>\n            <option value=\"kor\">韩语</option>\n            <option value=\"th\">泰语</option>\n          </select>↓ */} 我想要翻译成\n          <select id=\"to\" value={to} onChange={this.setTo}>\n            {languages.map(lang => <option key={lang.lang} value={lang.lang}>{lang.name}</option>)}\n          </select>▼\n        </div>\n        <textarea value={srcLang} onChange={this.setSrcLang} autoFocus placeholder=\"请输入文字\"></textarea>\n        <button id=\"btn\" onClick={this.fanyi}>翻译</button>\n        <div id=\"result\">{result}</div>\n        <footer>© 极简翻译 由 stage 制作</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}